@page "/Identity/Account/Register"
@using Microsoft.AspNetCore.Identity
@using BlazorIdentity.ServerApp.Data
@using System.ComponentModel.DataAnnotations
@using System.ComponentModel
@inject IUserClaimsPrincipalFactory<AppUser> UserClaimsPrincipalFactory
@inject UserManager<AppUser> UserManager
@inject IUserStore<AppUser> UserStore
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigate

<PageTitle>Register</PageTitle>

<h3>Register</h3>

<EditForm class="col-5" EditContext="editContext" OnSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="email" class="form-label">Email address</label>
        <InputText id="email" class="form-control" @bind-Value="registerModel.Email"></InputText>
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password"></InputText>
    </div>
    <div class="mb-3">
        <label for="confirmPassword" class="form-label">Confirm password</label>
        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="registerModel.ConfirmPassword"></InputText>
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@code {
    private EditContext? editContext;
    private RegisterModel registerModel = new();
    private ValidationMessageStore? messageStore;
    private IUserEmailStore<AppUser>? emailStore;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    protected override void OnInitialized()
    {
        editContext = new(registerModel);
        messageStore = new(editContext);

        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The UI requires a user store with email support.");
        }

        emailStore = (IUserEmailStore<AppUser>)UserStore;
    }

    private async Task HandleSubmit()
    {
        messageStore?.Clear();

        if (editContext?.Validate() != true)
        {
            return;
        }

        var user = new AppUser();
        await UserStore.SetUserNameAsync(user, registerModel.Email, CancellationToken.None);
        await emailStore.SetEmailAsync(user, registerModel.Email, CancellationToken.None);

        var result = await UserManager.CreateAsync(user, registerModel.Password!);

        if (result.Succeeded)
        {
            var userId = await UserManager.GetUserIdAsync(user);
            //var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);

            if (UserManager.Options.SignIn.RequireConfirmedAccount)
            {
                Navigate.NavigateTo("/Identity/Account/RegisterConfirmation");
            }
            else
            {
                var claimsPrincipal = await UserClaimsPrincipalFactory.CreateAsync(user);
                
                if (AuthStateProvider is IHostEnvironmentAuthenticationStateProvider authStateProvider)
                {
                    authStateProvider.SetAuthenticationState(Task.FromResult(new AuthenticationState(claimsPrincipal)));
                    // TODO: Create cookie via JsInterop
                }
                else
                {
                    throw new NotImplementedException("Not sure if this case needs to be supported");
                }

                // TODO: Implement return url?
                Navigate.NavigateTo("/");
            }
        }
        else
        {
            foreach (var error in result.Errors)
            {
                //ModelState.AddModelError(string.Empty, error.Description);
                messageStore?.Add(() => registerModel, error.Description);
            }
            editContext.NotifyValidationStateChanged();
        }
    }

    public class RegisterModel
    {
        [Required]
        [DataType(DataType.EmailAddress)]
        [Display(Name = "Email address")]
        public string? Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string? Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        public string? ConfirmPassword { get; set; }
    }
}
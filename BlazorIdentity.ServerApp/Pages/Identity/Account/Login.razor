@page "/Identity/Account/Login"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Server
@using Microsoft.AspNetCore.Identity
@using BlazorIdentity.ServerApp.Data
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Options
@inject IUserClaimsPrincipalFactory<AppUser> UserClaimsPrincipalFactory
@inject UserManager<AppUser> UserManager
@inject IUserStore<AppUser> UserStore
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigate
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@inject IOptions<CookieAuthenticationOptions> CookieAuthOptions

<PageTitle>Log in</PageTitle>

<h3>Log in</h3>

<EditForm class="col-5" EditContext="editContext" OnSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="email" class="form-label">Email address</label>
        <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
    </div>
    <div class="mb-3 form-check">
        <InputCheckbox id="rememberMe" class="form-check-input" @bind-Value="loginModel.RememberMe" />
        <label class="form-check-label" for="exampleCheck1">Remember me</label>
    </div>
    <div>
        <button type="submit" class="btn btn-primary">Login</button>
    </div>
</EditForm>

@code {
    private EditContext? editContext;
    private LoginModel loginModel = new();
    private ValidationMessageStore? messageStore;
    private IUserEmailStore<AppUser>? emailStore;
    private ValueTask<IJSObjectReference> _jsModuleTask;

    protected override void OnInitialized()
    {
        editContext = new(loginModel);
        messageStore = new(editContext);

        _jsModuleTask = JSRuntime.InvokeAsync<IJSObjectReference>("import", "./BlazorIdentity.js");
    }

    private async Task HandleSubmit()
    {
        messageStore?.Clear();

        if (editContext?.Validate() != true)
        {
            return;
        }

        var user = await UserManager.FindByEmailAsync(loginModel.Email!);

        if (user is null || !await UserManager.CheckPasswordAsync(user, loginModel.Password!))
        {
            messageStore?.Add(() => loginModel, "Login failed. Please check the email address and password.");
            editContext.NotifyValidationStateChanged();
            return;
        }

        var claimsPrincipal = await UserClaimsPrincipalFactory.CreateAsync(user);

        if (AuthStateProvider is IHostEnvironmentAuthenticationStateProvider authStateProvider)
        {
            authStateProvider.SetAuthenticationState(Task.FromResult(new AuthenticationState(claimsPrincipal)));

            // Initiate request from client to endpoint to retrieve auth cookie
            var ticket = new AuthenticationTicket(claimsPrincipal, IdentityConstants.ApplicationScheme);
            var ticketValue = CookieAuthOptions.Value.TicketDataFormat.Protect(ticket);
            var jsModule = await _jsModuleTask;
            await jsModule.InvokeAsync<string>("signIn", BlazorIdentityApi.SignInEndpointUrl, ticketValue, loginModel.RememberMe);
        }
        else
        {
            throw new NotImplementedException("Not sure if this case needs to be supported");
        }

        // TODO: Implement return url
        Navigate.NavigateTo("/");
    }

    public class LoginModel
    {
        [Required]
        [DataType(DataType.EmailAddress)]
        public string? Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string? Password { get; set; }

        public bool RememberMe { get; set; }
    }
}

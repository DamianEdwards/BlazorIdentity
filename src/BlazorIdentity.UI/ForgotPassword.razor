@typeparam TUser where TUser : class

@using Microsoft.Extensions.Logging
@using System.Text
@using System.Text.Encodings.Web

@inject IBlazorSignInManager<TUser> SignInManager
@inject IBlazorUserManager<TUser> UserManager
@inject ILogger<ForgotPassword<TUser>> logger
@inject IBlazorEmailSender EmailSender

<h4>Enter your email.</h4>

<hr />

<div class="row">
    <EditForm class="col-5" EditContext="editContext" OnSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="Email" class="form-label">Email address</label>
            <InputText id="Email" class="form-control" @bind-Value="forgotPasswordModel.Email" />
        </div>

        <div>
            <button type="submit" class="btn btn-primary">Reset Password</button>
        </div>

    </EditForm>
</div>

@code {
    private EditContext? editContext;
    private ForgotPasswordModel forgotPasswordModel = new();
    private ValidationMessageStore? messageStore;

    [Parameter]
    public EventCallback OnForgotPasswordConfirmation { get; set; }

    [Parameter]
    public EventCallback<bool> OnForgotPasswordError { get; set; }

    protected override void OnInitialized()
    {
        editContext = new(forgotPasswordModel);
        messageStore = new(editContext);
    }

    private async Task HandleSubmit()
    {
        messageStore?.Clear();

        if (editContext?.Validate() != true)
        {
            return;
        }

        var user = await UserManager.FindByEmailAsync(forgotPasswordModel.Email);

        if (user is null)
        {
            // pass back to component to handle - invalid user
            await OnForgotPasswordError.InvokeAsync(false);
            return;
        }

        if (!await UserManager.IsEmailConfirmed(user) && UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            // pass back to component to handle
            await OnForgotPasswordError.InvokeAsync(true);
            return;
        }

        var code = await UserManager.GeneratePasswordResetTokenAsync(user!);
        code = System.Web.HttpUtility.UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = $"/Account/ResetPassword/{code}";

        await EmailSender.SendEmailAsync(forgotPasswordModel.Email, "Reset Password",
        $"Please reset your password by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

        await OnForgotPasswordConfirmation.InvokeAsync();

    }

    public class ForgotPasswordModel
    {
        [Required]
        [DataType(DataType.EmailAddress)]
        [Display(Name = "Email address")]
        public string Email { get; set; } = default!;
    }
}

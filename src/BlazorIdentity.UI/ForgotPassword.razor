@typeparam TUser where TUser : class

@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@using System.Text.Encodings.Web

@inject IBlazorSignInManager<TUser> SignInManager
@inject IBlazorUserManager<TUser> UserManager
@inject ILogger<ForgotPassword<TUser>> logger
@inject NavigationManager NavManager
@inject IBlazorEmailSender EmailSender

<h4>Enter your email.</h4>

<hr />

<div class="row">
	<EditForm class="col-5" EditContext="editContext" OnSubmit="@HandleSubmit">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="mb-3">
			<label for="Email" class="form-label">Email address</label>
			<InputText id="Email" class="form-control" @bind-Value="forgotPasswordModel.Email" />
		</div>

		<div>
			<button type="submit" class="btn btn-primary">Reset Password</button>
		</div>

	</EditForm>
</div>

@code {
	private EditContext? editContext;
	private ForgotPasswordModel forgotPasswordModel = new();
	private ValidationMessageStore? messageStore;

	[Parameter]
	public string FailureMessage { get; set; } = "Login failed. Please check the email address and password.";

	protected override void OnInitialized()
	{
		editContext = new(forgotPasswordModel);
		messageStore = new(editContext);
	}

	private async Task HandleSubmit()
	{
		messageStore?.Clear();

		if (editContext?.Validate() != true)
		{
			return;
		}
		var user = await UserManager.FindByEmailAsync(forgotPasswordModel.Email);

		if (user == null || !(await UserManager.IsEmailConfirmedAsync(user)))
		{
			// Don't reveal that the user does not exist or is not confirmed
			NavManager.NavigateTo("/Account/ForgotPasswordConfirmation");
		}
		var code = await UserManager.GeneratePasswordResetTokenAsync(user!);
		code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
		var callbackUrl = $"/Account/ResetPassword/{code}";

		await EmailSender.SendEmailAsync(forgotPasswordModel.Email, "Reset Password",
		$"Please reset your password by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

		NavManager.NavigateTo("/Account/ForgotPasswordConfirmation");
	}

	public class ForgotPasswordModel
	{
		[Required]
		[DataType(DataType.EmailAddress)]
		[Display(Name = "Email address")]
		public string Email { get; set; } = default!;
	}
}

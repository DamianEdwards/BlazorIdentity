@typeparam TUser where TUser : class

@using System.Text
@using System.Text.Encodings.Web

@inject IBlazorSignInManager<TUser> SignInManager
@inject IBlazorUserManager<TUser> UserManager
@inject IBlazorUserStore<TUser> UserStore
@inject IBlazorEmailSender EmailSender

@code {
    [Parameter]
    public string UserId { get; set; } = default!;

    [Parameter]
    public string ConfirmationCode { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> OnConfirmEmailSent { get; set; }

	public string StatusMessage { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		if (UserId == null || ConfirmationCode == null)
		{
            throw new InvalidOperationException("Unexpected failure when validating parameters.");
		}

		var user = await UserManager.FindByIdAsync(UserId!);

		if (user == null)
		{
            throw new InvalidOperationException("Unexpected failure when loading user.");
		}

		ConfirmationCode = System.Web.HttpUtility.UrlDecode(ConfirmationCode!, System.Text.Encoding.UTF8);
		var result = await UserManager.ConfirmEmailAsync(user, ConfirmationCode);
		StatusMessage = result.Succeeded ? "Thank you for confirming your email." : "Error confirming your email.";
        await OnConfirmEmailSent.InvokeAsync(StatusMessage);
	}
}

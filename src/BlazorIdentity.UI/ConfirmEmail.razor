@typeparam TUser where TUser : class

@inject IBlazorSignInManager<TUser> SignInManager
@inject IBlazorUserManager<TUser> UserManager
@inject IBlazorUserStore<TUser> UserStore
@inject IBlazorEmailSender EmailSender
@inject NavigationManager NavManager

@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@using System.Text.Encodings.Web

@if (UserIdNotFound)
{
	<h3>Unable to load user with ID '@UserId'.</h3>
}
else
{
	<div class="alert alert-success alert-dismissable" role="alert">
		<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
		@StatusMessage
	</div>
}

@code {
	[Parameter]
	public string UserId { get; set; } = default!;

	[Parameter]
	public string ConfirmationCode { get; set; } = string.Empty;

	public bool UserIdNotFound { get; set; } = false;

	public string StatusMessage { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		if (UserId == null || ConfirmationCode == null)
		{
			NavManager.NavigateTo("/");
		}

		var user = await UserManager.FindByIdAsync(UserId!);

		if (user == null)
		{
			UserIdNotFound = true;
			StateHasChanged();
			return;
		}
		ConfirmationCode = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(ConfirmationCode));
		var result = await UserManager.ConfirmEmailAsync(user, ConfirmationCode);
		StatusMessage = result.Succeeded ? "Thank you for confirming your email." : "Error confirming your email.";
		StateHasChanged();
	}
}

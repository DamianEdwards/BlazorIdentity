@typeparam TUser where TUser : class

@inject IBlazorUserManager<TUser> UserManager
@inject IBlazorSignInManager<TUser> SignInManager

<EditForm class="col-5" EditContext="editContext" OnSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="currentPassword" class="form-label">Current password</label>
        <InputText id="currentPassword" type="password" class="form-control" @bind-Value="model.CurrentPassword" />
    </div>
    <div class="mb-3">
        <label for="newPassword" class="form-label">New password</label>
        <InputText id="newPassword" type="password" class="form-control" @bind-Value="model.NewPassword" />
    </div>
    <div class="mb-3">
        <label for="confirmPassword" class="form-label">Confirm new password</label>
        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="model.ConfirmPassword" />
    </div>
    <div>
        <button type="submit" class="btn btn-primary">Update password</button>
    </div>
</EditForm>

@code {
    private EditContext? editContext;
    private ChangePasswordModel model = new();
    private ValidationMessageStore? messageStore;
    private TUser? user;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    [Parameter]
    public EventCallback OnPasswordChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        editContext = new(model);
        messageStore = new(editContext);

        if (authenticationStateTask is null) throw new InvalidOperationException("Component is not initialized.");

        var authState = await authenticationStateTask;

        user = await UserManager.GetUserAsync(authState.User);

        if (user is null)
        {
            throw new InvalidOperationException("Unexpected failure when loading user.");
        }

        // TODO: Handle accounts with no password once external logins are supported
    }

    private async Task HandleSubmit()
    {
        if (user is null)
        {
            throw new InvalidOperationException("Unexpected failure when loading user.");
        }

        messageStore?.Clear();

        if (editContext?.Validate() != true)
        {
            return;
        }

        var result = await UserManager.ChangePasswordAsync(user, model.CurrentPassword, model.NewPassword);

        if (!result.Succeeded)
        {
            foreach (var error in result.Errors)
            {
                messageStore?.Add(() => model.NewPassword!, error.Description);
            }
            editContext.NotifyValidationStateChanged();
            return;
        }

        await OnPasswordChanged.InvokeAsync();
    }

    public class ChangePasswordModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string? CurrentPassword { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string? NewPassword { get; set; }

        [Required]
        [Compare(nameof(NewPassword))]
        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        public string? ConfirmPassword { get; set; }
    }
}

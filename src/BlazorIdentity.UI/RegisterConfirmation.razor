@typeparam TUser where TUser : class

@using System.Text
@using System.Text.Encodings.Web

@inject IBlazorUserManager<TUser> UserManager
@inject NavigationManager Navigation
@inject IBlazorUserStore<TUser> UserStore

@if (EmailNotFound)
{
	<h3>Unable to load user with email '@Email'.</h3>
}
else
{
	if (DisplayConfirmAccountLink)
	{
		<p>
			This app does not currently have a real email sender registered, see <a href="https://aka.ms/aspaccountconf">these docs</a> for how to configure a real email sender.
		</p>
		<p>
			Normally this would be emailed: <a id="confirm-link" href="@EmailConfirmationUrl">Click here to confirm your account</a>
		</p>
	}
	else
	{
		<p>Please check your email to confirm your account.</p>
	}
}

@code {

    private IBlazorUserEmailStore<TUser>? emailStore;

    [Parameter]
    public string Email { get; set; } = default!;

    public bool EmailNotFound { get; set; } = false;

    public bool DisplayConfirmAccountLink { get; set; }

    public string EmailConfirmationUrl { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The UI requires a user store with email support.");
        }

        emailStore = (IBlazorUserEmailStore<TUser>)UserStore;

        var user = await UserManager.FindByEmailAsync(Email);

        if (user is null)
        {
            EmailNotFound = true;
            StateHasChanged();
            return;
        }
        // Once you add a real email sender, you should remove this code that lets you confirm the account
        DisplayConfirmAccountLink = true;
        if (DisplayConfirmAccountLink)
        {
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = System.Web.HttpUtility.UrlEncode(Encoding.UTF8.GetBytes(code));

			EmailConfirmationUrl = $"/account/ConfirmEmail/{userId}/{code}";
		}
	}
}

@typeparam TUser where TUser : class

@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.WebUtilities
@using System.Text

@inject IBlazorSignInManager<TUser> SignInManager
@inject IBlazorUserManager<TUser> UserManager
@inject ILogger<ResetPassword<TUser>> logger
@inject NavigationManager NavManager

<hr />

<EditForm class="col-5" EditContext="editContext" OnSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="email" class="form-label">Email address</label>
        <InputText id="email" class="form-control" @bind-Value="resetPasswordModel.Email" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="resetPasswordModel.Password" />
    </div>
    <div class="mb-3">
        <label for="ConfirmPassword" class="form-label">Confirm password</label>
        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="resetPasswordModel.ConfirmPassword" />
    </div>
    <div>
        <button type="submit" class="btn btn-primary">Reset</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public string RecoveryCode { get; set; } = default!;

    private EditContext? editContext;
    private ResetPasswordModel resetPasswordModel = new();
    private ValidationMessageStore? messageStore;

    protected override void OnInitialized()
    {
        editContext = new(resetPasswordModel);
        messageStore = new(editContext);
        RecoveryCode = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(RecoveryCode));
    }

    private async Task HandleSubmit()
    {
        messageStore?.Clear();

        if (editContext?.Validate() != true)
        {
            return;
        }

        var user = await UserManager.FindByEmailAsync(resetPasswordModel.Email!);

        if (user == null)
        {
            // Don't reveal that the user does not exist
            NavManager.NavigateTo("/Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user!, RecoveryCode, resetPasswordModel.Password!);
        if (result.Succeeded)
        {
            NavManager.NavigateTo("/Account/ResetPasswordConfirmation");
        }
        foreach(var error in result.Errors)
        {
            messageStore?.Add(() => resetPasswordModel, error.Description);
        }
        editContext.NotifyValidationStateChanged();
    }

    public class ResetPasswordModel
    {
        [Required]
        [DataType(DataType.EmailAddress)]
        [Display(Name = "Email address")]
        public string? Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [Display(Name = "Password")]
        public string? Password { get; set; }

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string? ConfirmPassword { get; set; }
    }
}
